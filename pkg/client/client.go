// Package client extends the https://github.com/dghubble/sling package to provide a
// RESTful client to the Synse endpoints. The base url path is constructed
// from the configured Synse url as well as the type and version of the API.
// All new queries within synse should be using an instance of this client.
package client

import (
	"fmt"
	"net/http"
	"time"

	log "github.com/Sirupsen/logrus"
	"github.com/dghubble/sling"
	"github.com/urfave/cli"
	"github.com/vapor-ware/synse-cli/pkg/config"
	"github.com/vapor-ware/synse-cli/pkg/scheme"
)

// constructURL builds the full url string from the host base, endpoint type
// (Synse), and API version number. Endpoint paths can be extended off of
// this base.
func constructURL(host string) string {
	version := &scheme.Version{}
	err := DoGetUnversioned("version", version)
	if err != nil {
		log.Error("failed to get API version of Synse Server instance")
		cli.OsExiter(1)
	}
	return fmt.Sprintf("http://%s/synse/%s/", host, version.APIVersion)
}

// ErrorResponse contains the possible response data from an API error.
type ErrorResponse struct { // FIXME: This should go somewhere else
	HTTPCode int    `json:"http_code"`
	Message  string `json:"message"`
}

// LogMiddleware wraps the http.Client object to log messages generated by queries.
type LogMiddleware struct {
	c http.Client
}

// Do wraps the http.Request.Do object to log any messages during calls.
func (d LogMiddleware) Do(req *http.Request) (*http.Response, error) {
	log.WithFields(log.Fields{
		"method": req.Method,
		"url":    fmt.Sprintf("%v", req.URL),
		// We're not doing anything with headers or forms yet. Once we do, turn
		// these on.
		// ----
		// "header": fmt.Sprintf("%v", req.Header),
		// "form": fmt.Sprintf("%v", req.Form),
	}).Debug("request: start")

	start := time.Now()
	resp, err := d.c.Do(req)
	elapsed := time.Since(start)

	status := ""
	if resp != nil {
		status = resp.Status
	}

	log.WithFields(log.Fields{
		"duration": elapsed,
		"url":      fmt.Sprintf("%v", req.URL),
		"status":   status,
	}).Debug("request: complete")

	return resp, err
}

// NewUnversioned generates a new instance of the Client for the un-versioned base endpoint.
func NewUnversioned() *sling.Sling {
	return sling.New().Doer(&LogMiddleware{}).Base(fmt.Sprintf("http://%s/synse/", config.Config.ActiveHost.Address)).New()
}

// New generates a new instance of the Client with the current configuration.
func New() *sling.Sling {
	return sling.New().Doer(&LogMiddleware{}).Base(constructURL(config.Config.ActiveHost.Address)).New()
}
